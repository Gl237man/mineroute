COMPILER llc

	const int // types
	  undef = 0, integer = 1, boolean = 2;

	const int // object kinds
	  var = 0, proc = 1;


	public SymbolTable   tab;
	public CodeGenerator gen;

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  bindig = "01".
  hexdig = "0123456789ABCDEF".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  bits = "#b" {bindig}.
  hex = "#x" {hexdig}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
// Ident --------------------------------------------------------------------------------//
Ident<out string name>
= ident                  				(. name = t.val; .).
// Const --------------------------------------------------------------------------------//
Const<out string ID>					(. int wide;
										   int tval = 0; .)
= number								(. wide = Convert.ToInt32(t.val);.)
	(
		 "#i" number					(. tval = Convert.ToInt32(t.val);.)
		| bits						    (. tval = tab.bitConv(t.val);.)
        | hex						    (. tval = tab.hexConv(t.val);.)										
	)									
										(. ID = tab.newConst(wide,tval);.).
// Expresion ---------------------------------------------------------------------------//
Expresion<out string ID>												(. ID = "";
																		   string LID = "";.)
=
 LogicOp <out LID>														(. ID = LID; .).				

 // MultOpType -------------------------------------------------------------------------//
MultOpType <out string optype>	    	(. optype = "";.)
 = (									
	 '*'								(. optype = "MUL_";.)
	|'/'								(. optype = "DIV_";.)
   ).
 
// SumOpType ---------------------------------------------------------------------------//
SumOpType <out string optype>	    	(. optype = "";.)
 = (									
	 '+'								(. optype = "ADD_";.)
	|'-'								(. optype = "SUB_";.)
   ).

// CompareOpType -----------------------------------------------------------------------//
CompareOpType <out string optype>	  	(. optype = "";.)
 = (									
	 "=="								(. optype = "EQ_";.)
	|"!="								(. optype = "NOTEQ_";.)
	|">"								(. optype = "MORE_";.)
	|"<"								(. optype = "LESS_";.)
	|"<="								(. optype = "LESSEQ_";.)
	|">="								(. optype = "MOREEQ_";.)
   ).

// LogicOpType -------------------------------------------------------------------------//
LogicOpType <out string optype>	    	(. optype = "";.)
 = (									
	 '&'								(. optype = "AND_";.)
	|'|'								(. optype = "OR_";.)
	|'^'								(. optype = "XOR_";.)
   ).

// UnOpType -------------------------------------------------------------------------//
UnOpType <out string optype>	    	(. optype = "";.)
 = (									
	 "!"								(. optype = "NOT_";.)
	|"LL"								(. optype = "LL_";.)
	|"RR"								(. optype = "RR_";.)
	|"RRC"								(. optype = "RRC_";.)
	|"LLC"								(. optype = "LLC_";.)
   ).

// LogicOp -----------------------------------------------------------------------------//
LogicOp<out string ID>												    (. ID = "";
																		   string RID = "";
																		   string LID = "";
																		   string OP ="";.)
																				
 = CompareOp<out LID>													(. ID = LID;.)			
 [LogicOpType<out OP> LogicOp<out RID>]								    (. if (OP !="")
																		   {
																			ID = tab.NewBOP(OP);
																		   tab.NewWire(LID,ID,"O","A");
																		   tab.NewWire(RID,ID,"O","B");} .).

// CompareOp ---------------------------------------------------------------------------//
CompareOp<out string ID>												(. ID = "";
																		   string RID = "";
																		   string LID = "";
																		   string OP ="";.)
 = SumOp<out LID>														(. ID = LID;.)
 [CompareOpType<out OP> CompareOp<out RID>]								(. if (OP !="")
																		{
																			ID = tab.NewBOP(OP);
																			tab.NewWire(LID,ID,"O","A");
																			tab.NewWire(RID,ID,"O","B");} .).

// SumOp -------------------------------------------------------------------------------//
SumOp<out string ID>													(. ID = "";
																		   string RID = "";
																		   string LID = "";
																		   string OP ="";.)
 = MultOp<out LID>														(. ID = LID;.)
 [SumOpType<out OP> SumOp<out RID>]									(. if (OP !="")
																		{
																			ID = tab.NewBOP(OP);
																			tab.NewWire(LID,ID,"O","A");
																			tab.NewWire(RID,ID,"O","B");} .).

// MultOp ------------------------------------------------------------------------------//
MultOp<out string ID>													(. ID = "";
																		   string RID = "";
																		   string LID = "";
																		   string OP ="";.)
 = Term<out LID>														(. ID = LID;.)
 [MultOpType<out OP> MultOp<out RID>]									(. if (OP !="")
																		{
																			ID = tab.NewBOP(OP);
																			tab.NewWire(LID,ID,"O","A");
																			tab.NewWire(RID,ID,"O","B");} .).
// UNop --------------------------------------------------------------------------------//
UNOp<out string ID>													    (. ID = "";
																		   string LID = "";
																		   string OP ="";.)
 = UnOpType<out OP> Term<out LID>										(. ID = LID;.)
                                    									(. if (OP !="")
																		{   
																		    ID = tab.NewBOP(OP);
																			tab.NewWire(LID,ID,"O","I");} .).
// Term --------------------------------------------------------------------------------//
 Term<out string ID>					                                                (. ID = "";
																						string cID = "";.)
  = (Const<out cID> | Ident<out cID> | '(' Expresion <out cID> ')' | UNOp<out cID>)     (. ID = cID;.).

// Assign ------------------------------------------------------------------------------//
Assign									(. string name;
										   string ID;.)
= Ident<out name>						(. string wto = name; .)
	'='
	Expresion<out ID>					(. string wfrom = ID;.)
	';'									(. tab.NewWire(wfrom,wto,"O","I"); .).								
// PortDecl ----------------------------------------------------------------------------//
PortDecl
										(. int wide = 1;
										   string name;
										   string type = "NAN";.)
 = "PORT"
 (
	"IN"								(. type = "IN";.)
	|"OUT"								(. type = "OUT";.)
 )
	Ident<out name>
	{'[' number                         (. wide = Convert.ToInt32(t.val); .)
		 ']'}               		
	';'									(. tab.NewPort(name,type,wide); .).
 
// TrigDecl ----------------------------------------------------------------------------//
TrigDecl 	                			(. int wide = 1;
										   string name;.)
	= "TRIG" Ident<out name>			
	{'[' number                         (. wide = Convert.ToInt32(t.val); .)
		 ']'}               		
	';'                                 (. tab.NewTrig(name,wide); .).

// WireDecl ----------------------------------------------------------------------------//
WireDecl 	                			(. int wide = 1;
										   string name;.)
	= "WIRE" Ident<out name>			
	{'[' number                         (. wide = Convert.ToInt32(t.val); .)
		 ']'}               		
	';'                                 (. tab.NewWire(name,wide); .).
// llc --------------------------------------------------------------------------------//
llc = "main"
'{'										(. tab.OpenScope(); .)
	{ WireDecl|PortDecl|Assign|TrigDecl }
'}'										(. tab.CloseScope(); .).

END llc.

